### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Font {
  ascender: Int!
  compatibleFullName: String
  copyright: String
  createdAt: DateTime!
  descender: Int!
  description: String
  designer: String
  designerURL: String
  family: FontFamily!
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  glyphs(after: String, before: String, first: Int, last: Int, skip: Int): [Glyph!]!
  id: String!
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean!
  trademark: String
  uniqueID: String
  unitsPerEm: Int!
  updatedAt: DateTime!
  version: String
}

input FontCreateInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime!
  descender: Int
  description: String
  designer: String
  designerURL: String
  family: FontFamilyCreateOneWithoutFamilyInput!
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  glyphs: GlyphCreateManyWithoutGlyphsInput
  id: String!
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime!
  version: String
}

input FontCreateManyWithoutFontsInput {
  connect: [FontWhereUniqueInput!]
  create: [FontCreateWithoutFamilyInput!]
}

input FontCreateOneWithoutFontInput {
  connect: FontWhereUniqueInput
  create: FontCreateWithoutGlyphsInput
}

input FontCreateWithoutFamilyInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime!
  descender: Int
  description: String
  designer: String
  designerURL: String
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  glyphs: GlyphCreateManyWithoutGlyphsInput
  id: String!
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime!
  version: String
}

input FontCreateWithoutGlyphsInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime!
  descender: Int
  description: String
  designer: String
  designerURL: String
  family: FontFamilyCreateOneWithoutFamilyInput!
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  id: String!
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime!
  version: String
}

type FontFamily {
  category: String!
  createdAt: DateTime!
  family: String!
  fontFiles(after: String, before: String, first: Int, last: Int, skip: Int): [FontFile!]!
  fonts(after: String, before: String, first: Int, last: Int, skip: Int): [Font!]!
  id: String!
  kind: String!
  lastModified: DateTime!
  subsets: [String!]!
  updatedAt: DateTime!
  variants: [String!]!
  version: String!
}

input FontFamilyCreateInput {
  category: String
  createdAt: DateTime!
  family: String
  fontFiles: FontFileCreateManyWithoutFontFilesInput
  fonts: FontCreateManyWithoutFontsInput
  id: String!
  kind: String
  lastModified: DateTime!
  subsets: FontFamilyCreatesubsetsInput
  updatedAt: DateTime!
  variants: FontFamilyCreatevariantsInput
  version: String
}

input FontFamilyCreateOneWithoutFamilyInput {
  connect: FontFamilyWhereUniqueInput
  create: FontFamilyCreateWithoutFontsInput
}

input FontFamilyCreateOneWithoutFontFamilyInput {
  connect: FontFamilyWhereUniqueInput
  create: FontFamilyCreateWithoutFontFilesInput
}

input FontFamilyCreatesubsetsInput {
  set: [String!]
}

input FontFamilyCreatevariantsInput {
  set: [String!]
}

input FontFamilyCreateWithoutFontFilesInput {
  category: String
  createdAt: DateTime!
  family: String
  fonts: FontCreateManyWithoutFontsInput
  id: String!
  kind: String
  lastModified: DateTime!
  subsets: FontFamilyCreatesubsetsInput
  updatedAt: DateTime!
  variants: FontFamilyCreatevariantsInput
  version: String
}

input FontFamilyCreateWithoutFontsInput {
  category: String
  createdAt: DateTime!
  family: String
  fontFiles: FontFileCreateManyWithoutFontFilesInput
  id: String!
  kind: String
  lastModified: DateTime!
  subsets: FontFamilyCreatesubsetsInput
  updatedAt: DateTime!
  variants: FontFamilyCreatevariantsInput
  version: String
}

input FontFamilyOrderByInput {
  category: OrderByArg
  createdAt: OrderByArg
  family: OrderByArg
  id: OrderByArg
  kind: OrderByArg
  lastModified: OrderByArg
  updatedAt: OrderByArg
  version: OrderByArg
}

input FontFamilyUpdateInput {
  category: String
  createdAt: DateTime
  family: String
  fontFiles: FontFileUpdateManyWithoutFontFamilyInput
  fonts: FontUpdateManyWithoutFamilyInput
  id: String
  kind: String
  lastModified: DateTime
  subsets: FontFamilyUpdatesubsetsInput
  updatedAt: DateTime
  variants: FontFamilyUpdatevariantsInput
  version: String
}

input FontFamilyUpdateManyMutationInput {
  category: String
  createdAt: DateTime
  family: String
  id: String
  kind: String
  lastModified: DateTime
  subsets: FontFamilyUpdatesubsetsInput
  updatedAt: DateTime
  variants: FontFamilyUpdatevariantsInput
  version: String
}

input FontFamilyUpdateOneRequiredWithoutFontsInput {
  connect: FontFamilyWhereUniqueInput
  create: FontFamilyCreateWithoutFontsInput
  update: FontFamilyUpdateWithoutFontsDataInput
  upsert: FontFamilyUpsertWithoutFontsInput
}

input FontFamilyUpdateOneWithoutFontFilesInput {
  connect: FontFamilyWhereUniqueInput
  create: FontFamilyCreateWithoutFontFilesInput
  delete: Boolean
  disconnect: Boolean
  update: FontFamilyUpdateWithoutFontFilesDataInput
  upsert: FontFamilyUpsertWithoutFontFilesInput
}

input FontFamilyUpdatesubsetsInput {
  set: [String!]
}

input FontFamilyUpdatevariantsInput {
  set: [String!]
}

input FontFamilyUpdateWithoutFontFilesDataInput {
  category: String
  createdAt: DateTime
  family: String
  fonts: FontUpdateManyWithoutFamilyInput
  id: String
  kind: String
  lastModified: DateTime
  subsets: FontFamilyUpdatesubsetsInput
  updatedAt: DateTime
  variants: FontFamilyUpdatevariantsInput
  version: String
}

input FontFamilyUpdateWithoutFontsDataInput {
  category: String
  createdAt: DateTime
  family: String
  fontFiles: FontFileUpdateManyWithoutFontFamilyInput
  id: String
  kind: String
  lastModified: DateTime
  subsets: FontFamilyUpdatesubsetsInput
  updatedAt: DateTime
  variants: FontFamilyUpdatevariantsInput
  version: String
}

input FontFamilyUpsertWithoutFontFilesInput {
  create: FontFamilyCreateWithoutFontFilesInput!
  update: FontFamilyUpdateWithoutFontFilesDataInput!
}

input FontFamilyUpsertWithoutFontsInput {
  create: FontFamilyCreateWithoutFontsInput!
  update: FontFamilyUpdateWithoutFontsDataInput!
}

input FontFamilyWhereInput {
  AND: [FontFamilyWhereInput!]
  category: StringFilter
  createdAt: DateTimeFilter
  family: StringFilter
  fontFiles: FontFileFilter
  fonts: FontFilter
  id: StringFilter
  kind: StringFilter
  lastModified: DateTimeFilter
  NOT: [FontFamilyWhereInput!]
  OR: [FontFamilyWhereInput!]
  updatedAt: DateTimeFilter
  version: StringFilter
}

input FontFamilyWhereUniqueInput {
  family: String
  id: String
}

type FontFile {
  createdAt: DateTime!
  file: String!
  fontFamily: FontFamily
  id: String!
  name: String!
  updatedAt: DateTime!
}

input FontFileCreateInput {
  createdAt: DateTime!
  file: String
  fontFamily: FontFamilyCreateOneWithoutFontFamilyInput
  id: String!
  name: String
  updatedAt: DateTime!
}

input FontFileCreateManyWithoutFontFilesInput {
  connect: [FontFileWhereUniqueInput!]
  create: [FontFileCreateWithoutFontFamilyInput!]
}

input FontFileCreateWithoutFontFamilyInput {
  createdAt: DateTime!
  file: String
  id: String!
  name: String
  updatedAt: DateTime!
}

input FontFileFilter {
  every: FontFileWhereInput
  none: FontFileWhereInput
  some: FontFileWhereInput
}

input FontFileOrderByInput {
  createdAt: OrderByArg
  file: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input FontFileScalarWhereInput {
  AND: [FontFileScalarWhereInput!]
  createdAt: DateTimeFilter
  file: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [FontFileScalarWhereInput!]
  OR: [FontFileScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input FontFileUpdateInput {
  createdAt: DateTime
  file: String
  fontFamily: FontFamilyUpdateOneWithoutFontFilesInput
  id: String
  name: String
  updatedAt: DateTime
}

input FontFileUpdateManyDataInput {
  createdAt: DateTime
  file: String
  id: String
  name: String
  updatedAt: DateTime
}

input FontFileUpdateManyMutationInput {
  createdAt: DateTime
  file: String
  id: String
  name: String
  updatedAt: DateTime
}

input FontFileUpdateManyWithoutFontFamilyInput {
  connect: [FontFileWhereUniqueInput!]
  create: [FontFileCreateWithoutFontFamilyInput!]
  delete: [FontFileWhereUniqueInput!]
  deleteMany: [FontFileScalarWhereInput!]
  disconnect: [FontFileWhereUniqueInput!]
  set: [FontFileWhereUniqueInput!]
  update: [FontFileUpdateWithWhereUniqueWithoutFontFamilyInput!]
  updateMany: [FontFileUpdateManyWithWhereNestedInput!]
  upsert: [FontFileUpsertWithWhereUniqueWithoutFontFamilyInput!]
}

input FontFileUpdateManyWithWhereNestedInput {
  data: FontFileUpdateManyDataInput!
  where: FontFileScalarWhereInput!
}

input FontFileUpdateWithoutFontFamilyDataInput {
  createdAt: DateTime
  file: String
  id: String
  name: String
  updatedAt: DateTime
}

input FontFileUpdateWithWhereUniqueWithoutFontFamilyInput {
  data: FontFileUpdateWithoutFontFamilyDataInput!
  where: FontFileWhereUniqueInput!
}

input FontFileUpsertWithWhereUniqueWithoutFontFamilyInput {
  create: FontFileCreateWithoutFontFamilyInput!
  update: FontFileUpdateWithoutFontFamilyDataInput!
  where: FontFileWhereUniqueInput!
}

input FontFileWhereInput {
  AND: [FontFileWhereInput!]
  createdAt: DateTimeFilter
  file: StringFilter
  fontFamily: FontFamilyWhereInput
  id: StringFilter
  name: StringFilter
  NOT: [FontFileWhereInput!]
  OR: [FontFileWhereInput!]
  updatedAt: DateTimeFilter
}

input FontFileWhereUniqueInput {
  id: String
}

input FontFilter {
  every: FontWhereInput
  none: FontWhereInput
  some: FontWhereInput
}

input FontOrderByInput {
  ascender: OrderByArg
  compatibleFullName: OrderByArg
  copyright: OrderByArg
  createdAt: OrderByArg
  descender: OrderByArg
  description: OrderByArg
  designer: OrderByArg
  designerURL: OrderByArg
  fontFamily: OrderByArg
  fontFile: OrderByArg
  fontSubfamily: OrderByArg
  fullName: OrderByArg
  id: OrderByArg
  license: OrderByArg
  licenseURL: OrderByArg
  manufacturer: OrderByArg
  manufacturerURL: OrderByArg
  numberOfHMetrics: OrderByArg
  numGlyphs: OrderByArg
  outlinesFormat: OrderByArg
  postScriptName: OrderByArg
  preferredFamily: OrderByArg
  preferredSubfamily: OrderByArg
  sampleText: OrderByArg
  supported: OrderByArg
  trademark: OrderByArg
  uniqueID: OrderByArg
  unitsPerEm: OrderByArg
  updatedAt: OrderByArg
  version: OrderByArg
}

input FontScalarWhereInput {
  AND: [FontScalarWhereInput!]
  ascender: IntFilter
  compatibleFullName: NullableStringFilter
  copyright: NullableStringFilter
  createdAt: DateTimeFilter
  descender: IntFilter
  description: NullableStringFilter
  designer: NullableStringFilter
  designerURL: NullableStringFilter
  fontFamily: NullableStringFilter
  fontFile: NullableStringFilter
  fontSubfamily: NullableStringFilter
  fullName: NullableStringFilter
  glyphs: GlyphFilter
  id: StringFilter
  license: NullableStringFilter
  licenseURL: NullableStringFilter
  manufacturer: NullableStringFilter
  manufacturerURL: NullableStringFilter
  NOT: [FontScalarWhereInput!]
  numberOfHMetrics: NullableIntFilter
  numGlyphs: NullableIntFilter
  OR: [FontScalarWhereInput!]
  outlinesFormat: NullableStringFilter
  postScriptName: NullableStringFilter
  preferredFamily: NullableStringFilter
  preferredSubfamily: NullableStringFilter
  sampleText: NullableStringFilter
  supported: BooleanFilter
  trademark: NullableStringFilter
  uniqueID: NullableStringFilter
  unitsPerEm: IntFilter
  updatedAt: DateTimeFilter
  version: NullableStringFilter
}

input FontUpdateInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime
  descender: Int
  description: String
  designer: String
  designerURL: String
  family: FontFamilyUpdateOneRequiredWithoutFontsInput
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  glyphs: GlyphUpdateManyWithoutFontInput
  id: String
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime
  version: String
}

input FontUpdateManyDataInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime
  descender: Int
  description: String
  designer: String
  designerURL: String
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  id: String
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime
  version: String
}

input FontUpdateManyMutationInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime
  descender: Int
  description: String
  designer: String
  designerURL: String
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  id: String
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime
  version: String
}

input FontUpdateManyWithoutFamilyInput {
  connect: [FontWhereUniqueInput!]
  create: [FontCreateWithoutFamilyInput!]
  delete: [FontWhereUniqueInput!]
  deleteMany: [FontScalarWhereInput!]
  disconnect: [FontWhereUniqueInput!]
  set: [FontWhereUniqueInput!]
  update: [FontUpdateWithWhereUniqueWithoutFamilyInput!]
  updateMany: [FontUpdateManyWithWhereNestedInput!]
  upsert: [FontUpsertWithWhereUniqueWithoutFamilyInput!]
}

input FontUpdateManyWithWhereNestedInput {
  data: FontUpdateManyDataInput!
  where: FontScalarWhereInput!
}

input FontUpdateOneWithoutGlyphsInput {
  connect: FontWhereUniqueInput
  create: FontCreateWithoutGlyphsInput
  delete: Boolean
  disconnect: Boolean
  update: FontUpdateWithoutGlyphsDataInput
  upsert: FontUpsertWithoutGlyphsInput
}

input FontUpdateWithoutFamilyDataInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime
  descender: Int
  description: String
  designer: String
  designerURL: String
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  glyphs: GlyphUpdateManyWithoutFontInput
  id: String
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime
  version: String
}

input FontUpdateWithoutGlyphsDataInput {
  ascender: Int
  compatibleFullName: String
  copyright: String
  createdAt: DateTime
  descender: Int
  description: String
  designer: String
  designerURL: String
  family: FontFamilyUpdateOneRequiredWithoutFontsInput
  fontFamily: String
  fontFile: String
  fontSubfamily: String
  fullName: String
  id: String
  license: String
  licenseURL: String
  manufacturer: String
  manufacturerURL: String
  numberOfHMetrics: Int
  numGlyphs: Int
  outlinesFormat: String
  postScriptName: String
  preferredFamily: String
  preferredSubfamily: String
  sampleText: String
  supported: Boolean
  trademark: String
  uniqueID: String
  unitsPerEm: Int
  updatedAt: DateTime
  version: String
}

input FontUpdateWithWhereUniqueWithoutFamilyInput {
  data: FontUpdateWithoutFamilyDataInput!
  where: FontWhereUniqueInput!
}

input FontUpsertWithoutGlyphsInput {
  create: FontCreateWithoutGlyphsInput!
  update: FontUpdateWithoutGlyphsDataInput!
}

input FontUpsertWithWhereUniqueWithoutFamilyInput {
  create: FontCreateWithoutFamilyInput!
  update: FontUpdateWithoutFamilyDataInput!
  where: FontWhereUniqueInput!
}

input FontWhereInput {
  AND: [FontWhereInput!]
  ascender: IntFilter
  compatibleFullName: NullableStringFilter
  copyright: NullableStringFilter
  createdAt: DateTimeFilter
  descender: IntFilter
  description: NullableStringFilter
  designer: NullableStringFilter
  designerURL: NullableStringFilter
  family: FontFamilyWhereInput
  fontFamily: NullableStringFilter
  fontFile: NullableStringFilter
  fontSubfamily: NullableStringFilter
  fullName: NullableStringFilter
  glyphs: GlyphFilter
  id: StringFilter
  license: NullableStringFilter
  licenseURL: NullableStringFilter
  manufacturer: NullableStringFilter
  manufacturerURL: NullableStringFilter
  NOT: [FontWhereInput!]
  numberOfHMetrics: NullableIntFilter
  numGlyphs: NullableIntFilter
  OR: [FontWhereInput!]
  outlinesFormat: NullableStringFilter
  postScriptName: NullableStringFilter
  preferredFamily: NullableStringFilter
  preferredSubfamily: NullableStringFilter
  sampleText: NullableStringFilter
  supported: BooleanFilter
  trademark: NullableStringFilter
  uniqueID: NullableStringFilter
  unitsPerEm: IntFilter
  updatedAt: DateTimeFilter
  version: NullableStringFilter
}

input FontWhereUniqueInput {
  id: String
}

type Glyph {
  advanceWidth: Float
  createdAt: DateTime!
  font: Font
  id: String!
  index: Int
  leftSideBearing: Float
  name: String
  rightSideBearing: Float
  unicode: Int
  unicodes: [String!]!
  updatedAt: DateTime!
  x1: Float
  x2: Float
  xMax: Float
  xMin: Float
  y1: Float
  y2: Float
  yMax: Float
  yMin: Float
}

input GlyphCreateInput {
  advanceWidth: Float
  createdAt: DateTime!
  font: FontCreateOneWithoutFontInput
  id: String!
  index: Int
  leftSideBearing: Float
  name: String
  rightSideBearing: Float
  unicode: Int
  unicodes: GlyphCreateunicodesInput
  updatedAt: DateTime!
  x1: Float
  x2: Float
  xMax: Float
  xMin: Float
  y1: Float
  y2: Float
  yMax: Float
  yMin: Float
}

input GlyphCreateManyWithoutGlyphsInput {
  connect: [GlyphWhereUniqueInput!]
  create: [GlyphCreateWithoutFontInput!]
}

input GlyphCreateunicodesInput {
  set: [String!]
}

input GlyphCreateWithoutFontInput {
  advanceWidth: Float
  createdAt: DateTime!
  id: String!
  index: Int
  leftSideBearing: Float
  name: String
  rightSideBearing: Float
  unicode: Int
  unicodes: GlyphCreateunicodesInput
  updatedAt: DateTime!
  x1: Float
  x2: Float
  xMax: Float
  xMin: Float
  y1: Float
  y2: Float
  yMax: Float
  yMin: Float
}

input GlyphFilter {
  every: GlyphWhereInput
  none: GlyphWhereInput
  some: GlyphWhereInput
}

input GlyphOrderByInput {
  advanceWidth: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  index: OrderByArg
  leftSideBearing: OrderByArg
  name: OrderByArg
  rightSideBearing: OrderByArg
  unicode: OrderByArg
  updatedAt: OrderByArg
  x1: OrderByArg
  x2: OrderByArg
  xMax: OrderByArg
  xMin: OrderByArg
  y1: OrderByArg
  y2: OrderByArg
  yMax: OrderByArg
  yMin: OrderByArg
}

input GlyphScalarWhereInput {
  advanceWidth: NullableFloatFilter
  AND: [GlyphScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  index: NullableIntFilter
  leftSideBearing: NullableFloatFilter
  name: NullableStringFilter
  NOT: [GlyphScalarWhereInput!]
  OR: [GlyphScalarWhereInput!]
  rightSideBearing: NullableFloatFilter
  unicode: NullableIntFilter
  updatedAt: DateTimeFilter
  x1: NullableFloatFilter
  x2: NullableFloatFilter
  xMax: NullableFloatFilter
  xMin: NullableFloatFilter
  y1: NullableFloatFilter
  y2: NullableFloatFilter
  yMax: NullableFloatFilter
  yMin: NullableFloatFilter
}

input GlyphUpdateInput {
  advanceWidth: Float
  createdAt: DateTime
  font: FontUpdateOneWithoutGlyphsInput
  id: String
  index: Int
  leftSideBearing: Float
  name: String
  rightSideBearing: Float
  unicode: Int
  unicodes: GlyphUpdateunicodesInput
  updatedAt: DateTime
  x1: Float
  x2: Float
  xMax: Float
  xMin: Float
  y1: Float
  y2: Float
  yMax: Float
  yMin: Float
}

input GlyphUpdateManyDataInput {
  advanceWidth: Float
  createdAt: DateTime
  id: String
  index: Int
  leftSideBearing: Float
  name: String
  rightSideBearing: Float
  unicode: Int
  unicodes: GlyphUpdateunicodesInput
  updatedAt: DateTime
  x1: Float
  x2: Float
  xMax: Float
  xMin: Float
  y1: Float
  y2: Float
  yMax: Float
  yMin: Float
}

input GlyphUpdateManyMutationInput {
  advanceWidth: Float
  createdAt: DateTime
  id: String
  index: Int
  leftSideBearing: Float
  name: String
  rightSideBearing: Float
  unicode: Int
  unicodes: GlyphUpdateunicodesInput
  updatedAt: DateTime
  x1: Float
  x2: Float
  xMax: Float
  xMin: Float
  y1: Float
  y2: Float
  yMax: Float
  yMin: Float
}

input GlyphUpdateManyWithoutFontInput {
  connect: [GlyphWhereUniqueInput!]
  create: [GlyphCreateWithoutFontInput!]
  delete: [GlyphWhereUniqueInput!]
  deleteMany: [GlyphScalarWhereInput!]
  disconnect: [GlyphWhereUniqueInput!]
  set: [GlyphWhereUniqueInput!]
  update: [GlyphUpdateWithWhereUniqueWithoutFontInput!]
  updateMany: [GlyphUpdateManyWithWhereNestedInput!]
  upsert: [GlyphUpsertWithWhereUniqueWithoutFontInput!]
}

input GlyphUpdateManyWithWhereNestedInput {
  data: GlyphUpdateManyDataInput!
  where: GlyphScalarWhereInput!
}

input GlyphUpdateunicodesInput {
  set: [String!]
}

input GlyphUpdateWithoutFontDataInput {
  advanceWidth: Float
  createdAt: DateTime
  id: String
  index: Int
  leftSideBearing: Float
  name: String
  rightSideBearing: Float
  unicode: Int
  unicodes: GlyphUpdateunicodesInput
  updatedAt: DateTime
  x1: Float
  x2: Float
  xMax: Float
  xMin: Float
  y1: Float
  y2: Float
  yMax: Float
  yMin: Float
}

input GlyphUpdateWithWhereUniqueWithoutFontInput {
  data: GlyphUpdateWithoutFontDataInput!
  where: GlyphWhereUniqueInput!
}

input GlyphUpsertWithWhereUniqueWithoutFontInput {
  create: GlyphCreateWithoutFontInput!
  update: GlyphUpdateWithoutFontDataInput!
  where: GlyphWhereUniqueInput!
}

input GlyphWhereInput {
  advanceWidth: NullableFloatFilter
  AND: [GlyphWhereInput!]
  createdAt: DateTimeFilter
  font: FontWhereInput
  id: StringFilter
  index: NullableIntFilter
  leftSideBearing: NullableFloatFilter
  name: NullableStringFilter
  NOT: [GlyphWhereInput!]
  OR: [GlyphWhereInput!]
  rightSideBearing: NullableFloatFilter
  unicode: NullableIntFilter
  updatedAt: DateTimeFilter
  x1: NullableFloatFilter
  x2: NullableFloatFilter
  xMax: NullableFloatFilter
  xMin: NullableFloatFilter
  y1: NullableFloatFilter
  y2: NullableFloatFilter
  yMax: NullableFloatFilter
  yMin: NullableFloatFilter
}

input GlyphWhereUniqueInput {
  id: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneFont(data: FontCreateInput!): Font!
  createOneFontFamily(data: FontFamilyCreateInput!): FontFamily!
  createOneFontFile(data: FontFileCreateInput!): FontFile!
  createOneGlyph(data: GlyphCreateInput!): Glyph!
  deleteManyFont(where: FontWhereInput): BatchPayload!
  deleteManyFontFamily(where: FontFamilyWhereInput): BatchPayload!
  deleteManyFontFile(where: FontFileWhereInput): BatchPayload!
  deleteManyGlyph(where: GlyphWhereInput): BatchPayload!
  deleteOneFont(where: FontWhereUniqueInput!): Font
  deleteOneFontFamily(where: FontFamilyWhereUniqueInput!): FontFamily
  deleteOneFontFile(where: FontFileWhereUniqueInput!): FontFile
  deleteOneGlyph(where: GlyphWhereUniqueInput!): Glyph
  updateManyFont(data: FontUpdateManyMutationInput!, where: FontWhereInput): BatchPayload!
  updateManyFontFamily(data: FontFamilyUpdateManyMutationInput!, where: FontFamilyWhereInput): BatchPayload!
  updateManyFontFile(data: FontFileUpdateManyMutationInput!, where: FontFileWhereInput): BatchPayload!
  updateManyGlyph(data: GlyphUpdateManyMutationInput!, where: GlyphWhereInput): BatchPayload!
  updateOneFont(data: FontUpdateInput!, where: FontWhereUniqueInput!): Font
  updateOneFontFamily(data: FontFamilyUpdateInput!, where: FontFamilyWhereUniqueInput!): FontFamily
  updateOneFontFile(data: FontFileUpdateInput!, where: FontFileWhereUniqueInput!): FontFile
  updateOneGlyph(data: GlyphUpdateInput!, where: GlyphWhereUniqueInput!): Glyph
  upsertOneFont(create: FontCreateInput!, update: FontUpdateInput!, where: FontWhereUniqueInput!): Font!
  upsertOneFontFamily(create: FontFamilyCreateInput!, update: FontFamilyUpdateInput!, where: FontFamilyWhereUniqueInput!): FontFamily!
  upsertOneFontFile(create: FontFileCreateInput!, update: FontFileUpdateInput!, where: FontFileWhereUniqueInput!): FontFile!
  upsertOneGlyph(create: GlyphCreateInput!, update: GlyphUpdateInput!, where: GlyphWhereUniqueInput!): Glyph!
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Query {
  font(where: FontWhereUniqueInput!): Font
  fontFamilies(after: String, before: String, first: Int, last: Int, orderBy: FontFamilyOrderByInput, skip: Int, where: FontFamilyWhereInput): [FontFamily!]!
  fontFamily(where: FontFamilyWhereUniqueInput!): FontFamily
  fontFile(where: FontFileWhereUniqueInput!): FontFile
  fontFiles(after: String, before: String, first: Int, last: Int, orderBy: FontFileOrderByInput, skip: Int, where: FontFileWhereInput): [FontFile!]!
  fonts(after: String, before: String, first: Int, last: Int, orderBy: FontOrderByInput, skip: Int, where: FontWhereInput): [Font!]!
  glyph(where: GlyphWhereUniqueInput!): Glyph
  glyphs(after: String, before: String, first: Int, last: Int, orderBy: GlyphOrderByInput, skip: Int, where: GlyphWhereInput): [Glyph!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
